EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
CONVERSION(1).exe -- emu8086 assembler version: 4.08  
 
[ 11/5/2018  --  12:40:52 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .MODEL SMALL
[   2]        :                                       
[   3]        :                                       .STACK 100H
[   4]        :                                       
[   5]        :                                       .DATA
[   6]        :                                       
[   7]    0100: 00 00                                 OUTD DW ?
[   8]    0102: 00                                    IND DB ?
[   9]        :                                       
[  10]    0103: 00                                    SELECT DB ?
[  11]        :                                       
[  12]    0104: 00 00                                 INP1 DW ?   ; save decimal input
[  13]    0106: 00 00                                 INP2 DW ?   ; save binary input
[  14]    0108: 00 00                                 INP3 DW ?   ; save hexadecimal input
[  15]        :                                       
[  16]    010A: 00                                    COUNT DB ?
[  17]        :                                       
[  18]    010B: 00                                    O1 DB ?     ; save 1st 4bit of a binary number
[  19]    010C: 00                                    T2 DB ?     ; save 2nd 4bit of a binary number
[  20]    010D: 00                                    T3 DB ?     ; save 3rd 4bit of a binary number
[  21]    010E: 00                                    F4 DB ?     ; save 4th 4bit of a binary number
[  22]        :                                       
[  23]    010F: 00                                    D1 DB ?     ; save 1st decimal digit
[  24]    0110: 00                                    D2 DB ?     ; save 2nd decimal digit
[  25]    0111: 00                                    D3 DB ?     ; save 3rd decimal digit
[  26]    0112: 00                                    D4 DB ?     ; save 4th decimal digit
[  27]    0113: 00                                    D5 DB ?     ; save 5th decimal digit
[  28]        :                                       
[  29]    0114: 00 00                                 REM DW ?
[  30]        :                                       
[  31]    0116: 0A 0D 24                              NEWL DB 10,13,'$'   ;newline
[  32]        :                                       
[  33]    0119: 09 2D 2D 2D 2D 2D 2D 2D 2D 2D 2D 43   MENU DB 9,'----------CALCULATOR CONVERSION------- $'
                41 4C 43 55 4C 41 54 4F 52 20 43 4F 
                4E 56 45 52 53 49 4F 4E 2D 2D 2D 2D 
                2D 2D 2D 20 24                      
[  34]        :                                       
[  35]    0142: 31 2E 20 44 45 43 49 4D 41 4C 20 54   OP1 DB '1. DECIMAL TO BINARY $'
                4F 20 42 49 4E 41 52 59 20 24       
[  36]    0158: 32 2E 20 44 45 43 49 4D 41 4C 20 54   OP2 DB '2. DECIMAL TO HEXADECIMAL $'
                4F 20 48 45 58 41 44 45 43 49 4D 41 
                4C 20 24                            
[  37]    0173: 33 2E 20 42 49 4E 41 52 59 20 54 4F   OP3 DB '3. BINARY TO DECIMAL $'
                20 44 45 43 49 4D 41 4C 20 24       
[  38]    0189: 34 2E 20 42 49 4E 41 52 59 20 54 4F   OP4 DB '4. BINARY TO HEXADECIMAL $'
                20 48 45 58 41 44 45 43 49 4D 41 4C 
                20 24                               
[  39]    01A3: 35 2E 20 48 45 58 41 44 45 43 49 4D   OP5 DB '5. HEXADECIMAL TO DECIMAL $'
                41 4C 20 54 4F 20 44 45 43 49 4D 41 
                4C 20 24                            
[  40]    01BE: 36 2E 20 48 45 58 41 44 45 43 49 4D   OP6 DB '6. HEXADECIMAL TO BINARY $'
                41 4C 20 54 4F 20 42 49 4E 41 52 59 
                20 24                               
[  41]    01D8: 30 2E 20 45 58 49 54 20 24            OP0 DB '0. EXIT $'
[  42]        :                                       
[  43]    01E1: 2D 3E 20 28 30 20 54 4F 20 39 29 20   DECIMALINP DB '-> (0 TO 9) WITH '-' OR + AND MAXIMUM INPUT 65,535 $'
                57 49 54 48 20 27 2D 27 20 4F 52 20 
                2B 20 41 4E 44 20 4D 41 58 49 4D 55 
                4D 20 49 4E 50 55 54 20 36 35 2C 35 
                33 35 20 24                         
[  44]    0215: 2D 3E 20 28 30 20 26 20 31 29 20 41   BINARYINP DB '-> (0 & 1) AND MAXIMUM INPUT 1111 1111 1111 1111 $'
                4E 44 20 4D 41 58 49 4D 55 4D 20 49 
                4E 50 55 54 20 31 31 31 31 20 31 31 
                31 31 20 31 31 31 31 20 31 31 31 31 
                20 24                               
[  45]    0247: 2D 3E 20 28 30 20 54 4F 20 39 20 26   HEXADECIMALINP DB '-> (0 TO 9 && A TO F) AND MAXIMUM INPUT FFFF $'
                26 20 41 20 54 4F 20 46 29 20 41 4E 
                44 20 4D 41 58 49 4D 55 4D 20 49 4E 
                50 55 54 20 46 46 46 46 20 24       
[  46]        :                                       
[  47]    0275: 44 45 43 49 4D 41 4C 20 56 41 4C 55   INDECIMAL DB 'DECIMAL VALUE: $'
                45 3A 20 24                         
[  48]    0285: 42 49 4E 41 52 59 20 56 41 4C 55 45   INBINARY DB 'BINARY VALUE: $'
                3A 20 24                            
[  49]    0294: 48 45 58 41 44 45 43 49 4D 41 4C 20   INHEXADECIMAL DB 'HEXADECIMAL VALUE: $'
                56 41 4C 55 45 3A 20 24             
[  50]        :                                       
[  51]    02A8: 4E 42 3A 20 49 4E 50 55 54 20 45 52   ERRORMSG DB 'NB: INPUT ERROR.PLEASE PRESS RIGHT NUMBER !! $'
                52 4F 52 2E 50 4C 45 41 53 45 20 50 
                52 45 53 53 20 52 49 47 48 54 20 4E 
                55 4D 42 45 52 20 21 21 20 24       
[  52]    02D6: 4E 42 3A 20 49 4E 50 55 54 20 45 52   ERRORINP DB 'NB: INPUT ERROR.PLEASE INPUT VALID NUMBER !! $'
                52 4F 52 2E 50 4C 45 41 53 45 20 49 
                4E 50 55 54 20 56 41 4C 49 44 20 4E 
                55 4D 42 45 52 20 21 21 20 24       
[  53]        :                                       
[  54]    0304: 53 45 4C 45 43 54 3A 20 24            SELECTMSG DB 'SELECT: $'
[  55]        :                                       
[  56]        :                                       
[  57]    030D: 09 54 48 41 4E 4B 20 59 4F 55 20 24   ENDMSG DB 9,'THANK YOU $'
                                                    
[  58]        :                                       
[  59]        :                                       .CODE
[  60]        :                                       
[  61]    0320:                                       START:
[  62]        :                                       
[  63]    0320: B8 10 00                              MOV AX,@DATA    ; import data segment
[  64]    0323: 8E D8                                 MOV DS,AX
[  65]        :                                       
[  66]    0325: B4 09                                 MOV AH,9
[  67]    0327: BA 19 00                              LEA DX,MENU     ; print menu
[  68]    032A: CD 21                                 INT 21H
[  69]        :                                       
[  70]    032C: BA 16 00                              LEA DX,NEWL
[  71]    032F: CD 21                                 INT 21H
[  72]    0331: BA 16 00                              LEA DX,NEWL
[  73]    0334: CD 21                                 INT 21H
[  74]        :                                       
[  75]    0336: BA 42 00                              LEA DX,OP1      ; print option1
[  76]    0339: CD 21                                 INT 21H
[  77]    033B: BA 16 00                              LEA DX,NEWL
[  78]    033E: CD 21                                 INT 21H
[  79]        :                                       
[  80]    0340: BA 58 00                              LEA DX,OP2      ; print option2
[  81]    0343: CD 21                                 INT 21H
[  82]    0345: BA 16 00                              LEA DX,NEWL
[  83]    0348: CD 21                                 INT 21H
[  84]        :                                       
[  85]    034A: BA 73 00                              LEA DX,OP3      ; print option3
[  86]    034D: CD 21                                 INT 21H
[  87]    034F: BA 16 00                              LEA DX,NEWL
[  88]    0352: CD 21                                 INT 21H
[  89]        :                                       
[  90]    0354: BA 89 00                              LEA DX,OP4      ; print option4
[  91]    0357: CD 21                                 INT 21H
[  92]    0359: BA 16 00                              LEA DX,NEWL
[  93]    035C: CD 21                                 INT 21H
[  94]        :                                       
[  95]    035E: BA A3 00                              LEA DX,OP5      ; print option5
[  96]    0361: CD 21                                 INT 21H
[  97]    0363: BA 16 00                              LEA DX,NEWL
[  98]    0366: CD 21                                 INT 21H
[  99]        :                                       
[ 100]    0368: BA BE 00                              LEA DX,OP6      ; print option6
[ 101]    036B: CD 21                                 INT 21H
[ 102]    036D: BA 16 00                              LEA DX,NEWL
[ 103]    0370: CD 21                                 INT 21H
[ 104]        :                                       
[ 105]    0372: BA D8 00                              LEA DX,OP0      ; print exit option
[ 106]    0375: CD 21                                 INT 21H
[ 107]        :                                       
[ 108]    0377: BA 16 00                              LEA DX,NEWL
[ 109]    037A: CD 21                                 INT 21H
[ 110]    037C: BA 16 00                              LEA DX,NEWL
[ 111]    037F: CD 21                                 INT 21H
[ 112]        :                                       
[ 113]    0381: BA 04 02                              LEA DX,SELECTMSG    ; print select message
[ 114]    0384: CD 21                                 INT 21H
[ 115]        :                                       
[ 116]    0386: B4 01                                 MOV AH,1
[ 117]    0388: CD 21                                 INT 21H             ; taking input to select a option
[ 118]    038A: A2 03 00                              MOV SELECT,AL
[ 119]        :                                       
[ 120]        :                                       
[ 121]    038D: 80 3E 03 00 31                        CMP SELECT,'1'
[ 122]    0392: 74 4D                                 JE DECIMAL          ; part1: decimal to others
[ 123]    0394: 80 3E 03 00 32                        CMP SELECT,'2'
[ 124]    0399: 74 46                                 JE DECIMAL
[ 125]        :                                       
[ 126]    039B: 80 3E 03 00 33                        CMP SELECT,'3'
[ 127]    03A0: 75 03 E9 A7 00                        JE BINARY           ; part2: binary to others
[ 128]    03A5: 80 3E 03 00 34                        CMP SELECT,'4'
[ 129]    03AA: 75 03 E9 9D 00                        JE BINARY
[ 130]        :                                       
[ 131]    03AF: 80 3E 03 00 35                        CMP SELECT,'5'
[ 132]    03B4: 75 03 E9 FE 00                        JE HEXADECIMAL      ; part3: hexadecimal to others
[ 133]    03B9: 80 3E 03 00 36                        CMP SELECT,'6'
[ 134]    03BE: 75 03 E9 F4 00                        JE HEXADECIMAL
[ 135]        :                                       
[ 136]    03C3: 80 3E 03 00 30                        CMP SELECT,'0'      ; part4: exit
[ 137]    03C8: 75 03 E9 B8 03                        JE EXIT
[ 138]        :                                       
[ 139]        :                                       ;;ERROR TEST
[ 140]    03CD: 80 3E 03 00 30                        CMP SELECT,'0'
[ 141]    03D2: 7D 03 E9 82 03                        JL ERROR
[ 142]        :                                       
[ 143]    03D7: 80 3E 03 00 36                        CMP SELECT,'6'
[ 144]    03DC: 7E 03 E9 78 03                        JG ERROR
[ 145]        :                                       ;;;;;;;;;;;;
[ 146]        :                                       
[ 147]        :                                       
[ 148]    03E1:                                       DECIMAL:    ; part1
[ 149]        :                                       
[ 150]    03E1: B4 09                                 MOV AH,9
[ 151]    03E3: BA 16 00                              LEA DX,NEWL
[ 152]    03E6: CD 21                                 INT 21H
[ 153]    03E8: BA 16 00                              LEA DX,NEWL
[ 154]    03EB: CD 21                                 INT 21H
[ 155]    03ED: BA 16 00                              LEA DX,NEWL
[ 156]    03F0: CD 21                                 INT 21H
[ 157]        :                                       
[ 158]    03F2: BA E1 00                              LEA DX,DECIMALINP
[ 159]    03F5: CD 21                                 INT 21H
[ 160]        :                                       
[ 161]    03F7: BA 16 00                              LEA DX,NEWL
[ 162]    03FA: CD 21                                 INT 21H
[ 163]        :                                       
[ 164]    03FC: BA 75 01                              LEA DX,INDECIMAL
[ 165]    03FF: CD 21                                 INT 21H
[ 166]        :                                       
[ 167]    0401: E8 1E 01                              CALL INPUT_DECIMALFUN   ; calling decimal_input function
[ 168]    0404: 89 1E 04 00                           MOV INP1,BX         ; input saved in INP1
[ 169]        :                                       
[ 170]    0408: 80 3E 03 00 31                        CMP SELECT,'1'          ; for binary output
[ 171]    040D: 74 07                                 JE OUT_BINARY
[ 172]        :                                       
[ 173]    040F: 80 3E 03 00 32                        CMP SELECT,'2'          ; for hexadecimal output
[ 174]    0414: 74 1B                                 JE OUT_HEXA
[ 175]        :                                       
[ 176]        :                                       
[ 177]    0416:                                       OUT_BINARY:
[ 178]        :                                       
[ 179]    0416: B4 09                                 MOV AH,9
[ 180]    0418: BA 16 00                              LEA DX,NEWL
[ 181]    041B: CD 21                                 INT 21H
[ 182]    041D: BA 16 00                              LEA DX,NEWL
[ 183]    0420: CD 21                                 INT 21H
[ 184]        :                                       
[ 185]    0422: BA 85 01                              LEA DX,INBINARY
[ 186]    0425: CD 21                                 INT 21H
[ 187]        :                                       
[ 188]        :                                       
[ 189]    0427: 8B 1E 04 00                           MOV BX,INP1     ; fix input in a register for output
[ 190]    042B: E8 09 02                              CALL OUT_BINARYFUN      ; calling binary_output function
[ 191]        :                                       
[ 192]    042E: E9 3B 03                              JMP AGAIN       ; jump to redo label
[ 193]        :                                       
[ 194]        :                                       
[ 195]    0431:                                       OUT_HEXA:
[ 196]        :                                       
[ 197]    0431: B4 09                                 MOV AH,9
[ 198]    0433: BA 16 00                              LEA DX,NEWL
[ 199]    0436: CD 21                                 INT 21H
[ 200]    0438: BA 16 00                              LEA DX,NEWL
[ 201]    043B: CD 21                                 INT 21H
[ 202]        :                                       
[ 203]    043D: BA 94 01                              LEA DX,INHEXADECIMAL
[ 204]    0440: CD 21                                 INT 21H
[ 205]        :                                       
[ 206]    0442: 8B 1E 04 00                           MOV BX,INP1     ; fix input in a register for output
[ 207]    0446: E8 AA 01                              CALL OUT_HEXAFUN        ; calling hexadecimal_output function
[ 208]        :                                       
[ 209]    0449: E9 20 03                              JMP AGAIN       ; jump to redo label
[ 210]        :                                       
[ 211]        :                                       
[ 212]        :                                       
[ 213]    044C:                                       BINARY:
[ 214]        :                                       
[ 215]    044C: B4 09                                 MOV AH,9
[ 216]    044E: BA 16 00                              LEA DX,NEWL
[ 217]    0451: CD 21                                 INT 21H
[ 218]    0453: BA 16 00                              LEA DX,NEWL
[ 219]    0456: CD 21                                 INT 21H
[ 220]    0458: BA 16 00                              LEA DX,NEWL
[ 221]    045B: CD 21                                 INT 21H
[ 222]        :                                       
[ 223]    045D: BA 15 01                              LEA DX,BINARYINP
[ 224]    0460: CD 21                                 INT 21H
[ 225]        :                                       
[ 226]    0462: BA 16 00                              LEA DX,NEWL
[ 227]    0465: CD 21                                 INT 21H
[ 228]        :                                       
[ 229]    0467: BA 85 01                              LEA DX,INBINARY
[ 230]    046A: CD 21                                 INT 21H
[ 231]        :                                       
[ 232]    046C: E8 DC 01                              CALL INPUT_BINARYFUN
[ 233]    046F: 89 1E 06 00                           MOV INP2,BX
[ 234]        :                                       
[ 235]    0473: 80 3E 03 00 33                        CMP SELECT,'3'
[ 236]    0478: 74 07                                 JE OUT_DECIMAL
[ 237]        :                                       
[ 238]    047A: 80 3E 03 00 34                        CMP SELECT,'4'
[ 239]    047F: 74 1B                                 JE OUT_HEXA2
[ 240]        :                                       
[ 241]        :                                       
[ 242]    0481:                                       OUT_DECIMAL:
[ 243]        :                                       
[ 244]    0481: B4 09                                 MOV AH,9
[ 245]    0483: BA 16 00                              LEA DX,NEWL
[ 246]    0486: CD 21                                 INT 21H
[ 247]    0488: BA 16 00                              LEA DX,NEWL
[ 248]    048B: CD 21                                 INT 21H
[ 249]        :                                       
[ 250]    048D: BA 75 01                              LEA DX,INDECIMAL
[ 251]    0490: CD 21                                 INT 21H
[ 252]        :                                       
[ 253]    0492: 8B 1E 06 00                           MOV BX,INP2
[ 254]    0496: E8 DC 01                              CALL OUT_DECIMALFUN
[ 255]        :                                       
[ 256]    0499: E9 D0 02                              JMP AGAIN
[ 257]        :                                       
[ 258]    049C:                                       OUT_HEXA2:
[ 259]        :                                       
[ 260]    049C: B4 09                                 MOV AH,9
[ 261]    049E: BA 16 00                              LEA DX,NEWL
[ 262]    04A1: CD 21                                 INT 21H
[ 263]    04A3: BA 16 00                              LEA DX,NEWL
[ 264]    04A6: CD 21                                 INT 21H
[ 265]        :                                       
[ 266]    04A8: BA 94 01                              LEA DX,INHEXADECIMAL
[ 267]    04AB: CD 21                                 INT 21H
[ 268]        :                                       
[ 269]    04AD: 8B 1E 06 00                           MOV BX,INP2
[ 270]    04B1: E8 3F 01                              CALL OUT_HEXAFUN
[ 271]        :                                       
[ 272]    04B4: E9 B5 02                              JMP AGAIN
[ 273]        :                                       
[ 274]        :                                       
[ 275]        :                                       
[ 276]    04B7:                                       hexadecimal:
[ 277]        :                                       
[ 278]    04B7: B4 09                                 MOV AH,9
[ 279]    04B9: BA 16 00                              LEA DX,NEWL
[ 280]    04BC: CD 21                                 INT 21H
[ 281]    04BE: BA 16 00                              LEA DX,NEWL
[ 282]    04C1: CD 21                                 INT 21H
[ 283]    04C3: BA 16 00                              LEA DX,NEWL
[ 284]    04C6: CD 21                                 INT 21H
[ 285]        :                                       
[ 286]    04C8: BA 47 01                              LEA DX,HEXADECIMALINP
[ 287]    04CB: CD 21                                 INT 21H
[ 288]        :                                       
[ 289]    04CD: BA 16 00                              LEA DX,NEWL
[ 290]    04D0: CD 21                                 INT 21H
[ 291]        :                                       
[ 292]    04D2: BA 94 01                              LEA DX,INHEXADECIMAL
[ 293]    04D5: CD 21                                 INT 21H
[ 294]        :                                       
[ 295]    04D7: E8 34 02                              CALL INPUT_HEXAFUN
[ 296]    04DA: 89 1E 08 00                           MOV INP3,BX
[ 297]        :                                       
[ 298]    04DE: 80 3E 03 00 35                        CMP SELECT,'5'
[ 299]    04E3: 74 07                                 JE OUT_DECIMAL2
[ 300]        :                                       
[ 301]    04E5: 80 3E 03 00 36                        CMP SELECT,'6'
[ 302]    04EA: 74 1B                                 JE OUT_BINARY2
[ 303]        :                                       
[ 304]        :                                       
[ 305]    04EC:                                       OUT_DECIMAL2:
[ 306]        :                                       
[ 307]    04EC: B4 09                                 MOV AH,9
[ 308]    04EE: BA 16 00                              LEA DX,NEWL
[ 309]    04F1: CD 21                                 INT 21H
[ 310]    04F3: BA 16 00                              LEA DX,NEWL
[ 311]    04F6: CD 21                                 INT 21H
[ 312]        :                                       
[ 313]    04F8: BA 75 01                              LEA DX,INDECIMAL
[ 314]    04FB: CD 21                                 INT 21H
[ 315]        :                                       
[ 316]        :                                       
[ 317]    04FD: 8B 1E 08 00                           MOV BX,INP3
[ 318]    0501: E8 71 01                              CALL OUT_DECIMALFUN
[ 319]        :                                       
[ 320]    0504: E9 65 02                              JMP AGAIN
[ 321]        :                                       
[ 322]        :                                       
[ 323]    0507:                                       OUT_BINARY2:
[ 324]        :                                       
[ 325]    0507: B4 09                                 MOV AH,9
[ 326]    0509: BA 16 00                              LEA DX,NEWL
[ 327]    050C: CD 21                                 INT 21H
[ 328]    050E: BA 16 00                              LEA DX,NEWL
[ 329]    0511: CD 21                                 INT 21H
[ 330]        :                                       
[ 331]    0513: BA 85 01                              LEA DX,INBINARY
[ 332]    0516: CD 21                                 INT 21H
[ 333]        :                                       
[ 334]    0518: 8B 1E 08 00                           MOV BX,INP3
[ 335]    051C: E8 18 01                              CALL OUT_BINARYFUN
[ 336]        :                                       
[ 337]    051F: E9 4A 02                              jmp AGAIN
[ 338]        :                                       
[ 339]        :                                       
[ 340]        :                                       
[ 341]        :                                       
[ 342]        :                                       
[ 343]        :                                       
[ 344]        :                                       ;;;Functions Area
[ 345]        :                                       
[ 346]        :                                       ;;; input_deci and convert into binary(input in bx)
[ 347]        :                                       
[ 348]    0522:                                       INPUT_DECIMALFUN PROC
[ 349]        :                                       
[ 350]    0522: B4 01                                 MOV AH,1
[ 351]    0524: CD 21                                 INT 21H
[ 352]    0526: A2 02 00                              MOV IND,AL
[ 353]        :                                       
[ 354]    0529: 80 3E 02 00 2D                        CMP IND,'-'
[ 355]    052E: 75 02                                 JNE NEXTPOS
[ 356]        :                                       
[ 357]    0530: EB 0A                                 JMP BEGIN1
[ 358]        :                                       
[ 359]    0532:                                       NEXTPOS:
[ 360]    0532: 80 3E 02 00 2B                        CMP IND,'+'
[ 361]    0537: 74 03 E9 0A 02                        JNE ERRORIN
[ 362]        :                                       
[ 363]        :                                       
[ 364]    053C:                                       BEGIN1:
[ 365]    053C: 33 DB                                 XOR BX,BX
[ 366]        :                                       
[ 367]    053E: B4 01                                 MOV AH,1
[ 368]    0540: CD 21                                 INT 21H
[ 369]        :                                       
[ 370]    0542: B9 00 00                              MOV CX,0
[ 371]        :                                       
[ 372]    0545:                                       REPEAT3:
[ 373]        :                                       
[ 374]        :                                       ;;ERROR TEST
[ 375]    0545: 3C 30                                 CMP AL,'0'
[ 376]    0547: 7D 03 E9 FA 01                        JL ERRORIN
[ 377]        :                                       
[ 378]    054C: 3C 39                                 CMP AL,'9'
[ 379]    054E: 7E 03 E9 F3 01                        JG ERRORIN
[ 380]        :                                       ;;;;;;;;;;;
[ 381]        :                                       
[ 382]    0553: 83 F9 00                              CMP CX,0
[ 383]    0556: 74 14                                 JE ADD1
[ 384]    0558: 83 F9 01                              CMP CX,1
[ 385]    055B: 74 14                                 JE ADD2
[ 386]    055D: 83 F9 02                              CMP CX,2
[ 387]    0560: 74 14                                 JE ADD3
[ 388]    0562: 83 F9 03                              CMP CX,3
[ 389]    0565: 74 14                                 JE ADD4
[ 390]    0567: 83 F9 04                              CMP CX,4
[ 391]    056A: 74 14                                 JE ADD5
[ 392]        :                                       
[ 393]    056C:                                       ADD1:
[ 394]    056C: A2 0F 00                              MOV D1,AL
[ 395]    056F: EB 14                                 JMP WORK
[ 396]    0571:                                       ADD2:
[ 397]    0571: A2 10 00                              MOV D2,AL
[ 398]    0574: EB 0F                                 JMP WORK
[ 399]    0576:                                       ADD3:
[ 400]    0576: A2 11 00                              MOV D3,AL
[ 401]    0579: EB 0A                                 JMP WORK
[ 402]    057B:                                       ADD4:
[ 403]    057B: A2 12 00                              MOV D4,AL
[ 404]    057E: EB 05                                 JMP WORK
[ 405]    0580:                                       ADD5:
[ 406]    0580: A2 13 00                              MOV D5,AL
[ 407]    0583: EB 00                                 JMP WORK
[ 408]        :                                       
[ 409]        :                                       
[ 410]    0585:                                       WORK:
[ 411]    0585: 25 0F 00                              AND AX,000FH
[ 412]    0588: 50                                    PUSH AX
[ 413]        :                                       
[ 414]    0589: B8 0A 00                              MOV AX,10
[ 415]    058C: F7 E3                                 MUL BX
[ 416]    058E: 5B                                    POP BX
[ 417]    058F: 03 D8                                 ADD BX,AX
[ 418]        :                                       
[ 419]    0591: 41                                    INC CX
[ 420]    0592: 83 F9 05                              CMP CX,5
[ 421]    0595: 74 0E                                 JE EXIT2
[ 422]        :                                       
[ 423]    0597: B4 01                                 MOV AH,1
[ 424]    0599: CD 21                                 INT 21H
[ 425]        :                                       
[ 426]    059B: 3C 0D                                 CMP AL,0DH
[ 427]    059D: 74 48                                 JE EXIT1
[ 428]        :                                       
[ 429]    059F: 3C 0D                                 CMP AL,0DH
[ 430]    05A1: 75 00                                 JNE REPEATING
[ 431]        :                                       
[ 432]        :                                       
[ 433]    05A3:                                       REPEATING:
[ 434]        :                                       
[ 435]    05A3: EB A0                                 JMP REPEAT3
[ 436]        :                                       
[ 437]        :                                       
[ 438]    05A5:                                       EXIT2:
[ 439]        :                                       
[ 440]    05A5: A0 0F 00                              MOV AL,D1
[ 441]    05A8: 3C 36                                 CMP AL,'6'
[ 442]    05AA: 7E 03 E9 AA 01                        JG ERROR
[ 443]    05AF: 3C 36                                 CMP AL,'6'
[ 444]    05B1: 7E 00                                 JLE NEXT2
[ 445]        :                                       
[ 446]    05B3:                                       NEXT2:
[ 447]    05B3: A0 10 00                              MOV AL,D2
[ 448]    05B6: 3C 35                                 CMP AL,'5'
[ 449]    05B8: 7E 03 E9 89 01                        JG ERRORIN
[ 450]    05BD: 3C 35                                 CMP AL,'5'
[ 451]    05BF: 7E 00                                 JLE NEXT3
[ 452]        :                                       
[ 453]    05C1:                                       NEXT3:
[ 454]    05C1: A0 11 00                              MOV AL,D3
[ 455]    05C4: 3C 35                                 CMP AL,'5'
[ 456]    05C6: 7E 03 E9 7B 01                        JG ERRORIN
[ 457]    05CB: 3C 35                                 CMP AL,'5'
[ 458]    05CD: 7E 00                                 JLE NEXT4
[ 459]        :                                       
[ 460]    05CF:                                       NEXT4:
[ 461]    05CF: A0 12 00                              MOV AL,D4
[ 462]    05D2: 3C 33                                 CMP AL,'3'
[ 463]    05D4: 7E 03 E9 6D 01                        JG ERRORIN
[ 464]    05D9: 3C 33                                 CMP AL,'3'
[ 465]    05DB: 7E 00                                 JLE NEXT5
[ 466]        :                                       
[ 467]    05DD:                                       NEXT5:
[ 468]    05DD: A0 13 00                              MOV AL,D5
[ 469]    05E0: 3C 35                                 CMP AL,'5'
[ 470]    05E2: 7E 03 E9 5F 01                        JG ERRORIN
[ 471]        :                                       
[ 472]    05E7:                                       EXIT1:
[ 473]        :                                       
[ 474]    05E7: 80 3E 02 00 2D                        CMP IND,'-'
[ 475]    05EC: 74 02                                 JE NGD
[ 476]        :                                       
[ 477]    05EE: EB 02                                 JMP EXITIND
[ 478]    05F0:                                       NGD:
[ 479]    05F0: F7 DB                                 NEG BX
[ 480]        :                                       
[ 481]    05F2:                                       EXITIND:
[ 482]        :                                       
[ 483]    05F2: C3                                    RET
[ 484]        :                                       INPUT_DECIMALFUN ENDP
[ 485]        :                                       
[ 486]        :                                       
[ 487]        :                                       ;;; output_hexadecimal from binary(work with bx)
[ 488]        :                                       
[ 489]    05F3:                                       out_hexafun proc
[ 490]        :                                       
[ 491]    05F3: B0 00                                 mov al,0
[ 492]    05F5: A2 0A 00                              mov count,al
[ 493]        :                                       
[ 494]    05F8: 33 D2                                 xor dx,dx
[ 495]    05FA: 33 C0                                 xor ax,ax
[ 496]        :                                       
[ 497]        :                                       
[ 498]    05FC: B9 10 00                              mov cx,16
[ 499]        :                                       
[ 500]    05FF:                                       while:
[ 501]    05FF: D1 E2                                 shl dx,1
[ 502]    0601: FE 06 0A 00                           inc count
[ 503]        :                                       
[ 504]    0605: D1 E3                                 shl bx,1
[ 505]    0607: 72 05                                 jc one
[ 506]        :                                       
[ 507]        :                                       
[ 508]    0609: B8 00 00                              mov ax,0
[ 509]    060C: EB 03                                 jmp cont
[ 510]        :                                       
[ 511]    060E:                                       one:
[ 512]    060E: B8 01 00                              mov ax,1
[ 513]        :                                       
[ 514]    0611:                                       cont:
[ 515]    0611: 0B D0                                 or dx,ax
[ 516]        :                                       
[ 517]    0613: 80 3E 0A 00 04                        cmp count,4
[ 518]    0618: 74 02                                 je pus
[ 519]    061A: EB 18                                 jmp lp
[ 520]        :                                       
[ 521]    061C:                                       pus:
[ 522]    061C: 83 FA 09                              cmp dx,9
[ 523]    061F: 7D 05                                 jge letter
[ 524]        :                                       
[ 525]    0621: 83 C2 30                              add dx,30h
[ 526]    0624: EB 03                                 jmp prnt
[ 527]        :                                       
[ 528]    0626:                                       letter:
[ 529]    0626: 83 C2 37                              add dx,37h
[ 530]        :                                       
[ 531]    0629:                                       prnt:
[ 532]    0629: B4 02                                 mov ah,2
[ 533]    062B: CD 21                                 int 21h
[ 534]        :                                       
[ 535]    062D: 33 D2                                 xor dx,dx
[ 536]    062F: C6 06 0A 00 00                        mov count,0
[ 537]        :                                       
[ 538]    0634:                                       lp:
[ 539]    0634: E2 C9                                 loop while
[ 540]        :                                       
[ 541]        :                                       
[ 542]        :                                       
[ 543]        :                                       
[ 544]        :                                       
[ 545]    0636: C3                                    ret
[ 546]        :                                       out_hexafun endp
[ 547]        :                                       
[ 548]        :                                       
[ 549]        :                                       
[ 550]        :                                       
[ 551]        :                                       ;;;output_binary from binary(work with bx)
[ 552]        :                                       
[ 553]    0637:                                       OUT_BINARYFUN PROC
[ 554]        :                                       
[ 555]    0637: B4 02                                 MOV AH,2
[ 556]    0639: B9 10 00                              MOV CX,16
[ 557]        :                                       
[ 558]    063C:                                       TOPBIN:
[ 559]    063C: D1 E3                                 SHL BX,1
[ 560]    063E: 73 04                                 JNC ZEROBIN
[ 561]        :                                       
[ 562]    0640: B2 31                                 MOV DL,49
[ 563]    0642: EB 02                                 JMP PRINTBIN
[ 564]        :                                       
[ 565]    0644:                                       ZEROBIN:
[ 566]    0644: B2 30                                 MOV DL,48
[ 567]        :                                       
[ 568]    0646:                                       PRINTBIN:
[ 569]    0646: CD 21                                 INT 21H
[ 570]    0648: E2 F2                                 LOOP TOPBIN
[ 571]        :                                       
[ 572]        :                                       
[ 573]    064A: C3                                    RET
[ 574]        :                                       OUT_BINARYFUN ENDP
[ 575]        :                                       
[ 576]        :                                       
[ 577]        :                                       
[ 578]        :                                       
[ 579]        :                                       ;;;input_binary and convert into binary
[ 580]        :                                       
[ 581]    064B:                                       INPUT_BINARYFUN PROC
[ 582]        :                                       
[ 583]    064B: 33 C0                                 XOR AX,AX
[ 584]    064D: 33 DB                                 XOR BX,BX
[ 585]    064F: 33 C9                                 XOR CX,CX
[ 586]    0651: 33 D2                                 XOR DX,DX
[ 587]        :                                       
[ 588]    0653: B9 10 00                              MOV CX,16
[ 589]        :                                       
[ 590]    0656:                                       INPUT_BIN:
[ 591]        :                                       
[ 592]    0656: B4 01                                 MOV AH,1
[ 593]    0658: CD 21                                 INT 21H
[ 594]        :                                       
[ 595]    065A: 3C 0D                                 CMP AL,0DH
[ 596]    065C: 74 16                                 JE BREAK
[ 597]        :                                       
[ 598]        :                                       ;;ERROR TEST
[ 599]    065E: 3C 31                                 CMP AL,'1'
[ 600]    0660: 7E 03 E9 E1 00                        JG ERRORIN
[ 601]        :                                       
[ 602]    0665: 3C 30                                 CMP AL,'0'
[ 603]    0667: 7D 03 E9 DA 00                        JL ERRORIN
[ 604]        :                                       ;;;;;;;;;;;;
[ 605]        :                                       
[ 606]    066C: D1 E3                                 SHL BX,1
[ 607]        :                                       
[ 608]        :                                       
[ 609]    066E: 2C 30                                 SUB AL,30H
[ 610]    0670: 0A D8                                 OR BL,AL
[ 611]        :                                       
[ 612]    0672: E2 E2                                 LOOP INPUT_BIN
[ 613]        :                                       
[ 614]    0674:                                       BREAK:
[ 615]        :                                       
[ 616]        :                                       
[ 617]    0674: C3                                    RET
[ 618]        :                                       INPUT_BINARYFUN ENDP
[ 619]        :                                       
[ 620]        :                                       
[ 621]        :                                       
[ 622]        :                                       ;;;output_decimal from binary
[ 623]        :                                       
[ 624]    0675:                                       OUT_DECIMALFUN PROC
[ 625]        :                                       
[ 626]    0675: 33 C0                                 XOR AX,AX
[ 627]        :                                       
[ 628]    0677: 8B C3                                 MOV AX,BX
[ 629]    0679: 89 1E 00 00                           MOV OUTD,BX
[ 630]        :                                       
[ 631]    067D:                                       DO:
[ 632]        :                                       
[ 633]    067D: A1 00 00                              MOV AX,OUTD
[ 634]        :                                       
[ 635]    0680: 3D 0F 27                              CMP AX,9999
[ 636]    0683: 7F 19                                 JG ATENT
[ 637]        :                                       
[ 638]    0685: 3D E7 03                              CMP AX,999
[ 639]    0688: 7F 2A                                 JG AONET
[ 640]        :                                       
[ 641]    068A: 3D 63 00                              CMP AX,99
[ 642]    068D: 7F 3B                                 JG AONEH
[ 643]        :                                       
[ 644]    068F: 3D 09 00                              CMP AX,9
[ 645]    0692: 7F 4C                                 JG ATEN
[ 646]        :                                       
[ 647]    0694: 3D 00 00                              CMP AX,0
[ 648]    0697: 7D 5D                                 JGE AZERO
[ 649]        :                                       
[ 650]    0699: 3D 00 00                              CMP AX,0
[ 651]    069C: 7C 62                                 JL UZERO
[ 652]        :                                       
[ 653]        :                                       
[ 654]    069E:                                       ATENT:
[ 655]        :                                       
[ 656]    069E: 33 D2                                 XOR DX,DX
[ 657]        :                                       
[ 658]    06A0: BB 10 27                              MOV BX,10000
[ 659]    06A3: F7 F3                                 DIV BX
[ 660]        :                                       
[ 661]    06A5: 89 16 14 00                           MOV REM,DX
[ 662]        :                                       
[ 663]    06A9: 04 30                                 ADD AL,30H
[ 664]        :                                       
[ 665]    06AB: B4 02                                 MOV AH,2
[ 666]    06AD: 8A D0                                 MOV DL,AL
[ 667]    06AF: CD 21                                 INT 21H
[ 668]        :                                       
[ 669]    06B1: A1 14 00                              MOV AX,REM
[ 670]        :                                       
[ 671]        :                                       
[ 672]    06B4:                                       AONET:
[ 673]        :                                       
[ 674]    06B4: 33 D2                                 XOR DX,DX
[ 675]        :                                       
[ 676]    06B6: BB E8 03                              MOV BX,1000
[ 677]    06B9: F7 F3                                 DIV BX
[ 678]        :                                       
[ 679]    06BB: 89 16 14 00                           MOV REM,DX
[ 680]        :                                       
[ 681]    06BF: 04 30                                 ADD AL,30H
[ 682]        :                                       
[ 683]    06C1: B4 02                                 MOV AH,2
[ 684]    06C3: 8A D0                                 MOV DL,AL
[ 685]    06C5: CD 21                                 INT 21H
[ 686]        :                                       
[ 687]    06C7: A1 14 00                              MOV AX,REM
[ 688]        :                                       
[ 689]        :                                       
[ 690]    06CA:                                       AONEH:
[ 691]        :                                       
[ 692]    06CA: 33 D2                                 XOR DX,DX
[ 693]        :                                       
[ 694]    06CC: BB 64 00                              MOV BX,100
[ 695]    06CF: F7 F3                                 DIV BX
[ 696]        :                                       
[ 697]    06D1: 89 16 14 00                           MOV REM,DX
[ 698]        :                                       
[ 699]    06D5: 04 30                                 ADD AL,30H
[ 700]        :                                       
[ 701]    06D7: B4 02                                 MOV AH,2
[ 702]    06D9: 8A D0                                 MOV DL,AL
[ 703]    06DB: CD 21                                 INT 21H
[ 704]        :                                       
[ 705]    06DD: A1 14 00                              MOV AX,REM
[ 706]        :                                       
[ 707]        :                                       
[ 708]    06E0:                                       ATEN:
[ 709]        :                                       
[ 710]    06E0: 33 D2                                 XOR DX,DX
[ 711]        :                                       
[ 712]    06E2: BB 0A 00                              MOV BX,10
[ 713]    06E5: F7 F3                                 DIV BX
[ 714]        :                                       
[ 715]    06E7: 89 16 14 00                           MOV REM,DX
[ 716]        :                                       
[ 717]    06EB: 04 30                                 ADD AL,30H
[ 718]        :                                       
[ 719]    06ED: B4 02                                 MOV AH,2
[ 720]    06EF: 8A D0                                 MOV DL,AL
[ 721]    06F1: CD 21                                 INT 21H
[ 722]        :                                       
[ 723]    06F3: A1 14 00                              MOV AX,REM
[ 724]        :                                       
[ 725]        :                                       
[ 726]    06F6:                                       AZERO:
[ 727]        :                                       
[ 728]    06F6: 04 30                                 ADD AL,30H
[ 729]        :                                       
[ 730]    06F8: B4 02                                 MOV AH,2
[ 731]    06FA: 8A D0                                 MOV DL,AL
[ 732]    06FC: CD 21                                 INT 21H
[ 733]        :                                       
[ 734]    06FE: EB 0D                                 JMP BREAK2
[ 735]        :                                       
[ 736]        :                                       
[ 737]    0700:                                       UZERO:
[ 738]        :                                       
[ 739]    0700: B4 02                                 MOV AH,2
[ 740]    0702: B2 2D                                 MOV DL,'-'
[ 741]    0704: CD 21                                 INT 21H
[ 742]        :                                       
[ 743]    0706: F7 1E 00 00                           NEG OUTD
[ 744]    070A: E9 70 FF                              JMP DO
[ 745]        :                                       
[ 746]        :                                       
[ 747]    070D:                                       BREAK2:
[ 748]        :                                       
[ 749]    070D: C3                                    RET
[ 750]        :                                       OUT_DECIMALFUN ENDP
[ 751]        :                                       
[ 752]        :                                       
[ 753]        :                                       
[ 754]        :                                       
[ 755]        :                                       ;;;input_hexadecimal and convert into binary
[ 756]        :                                       
[ 757]    070E:                                       INPUT_HEXAFUN PROC
[ 758]        :                                       
[ 759]    070E: 33 DB                                 XOR BX,BX
[ 760]    0710: 33 C9                                 XOR CX,CX
[ 761]        :                                       
[ 762]    0712: B9 04 00                              MOV CX,4
[ 763]        :                                       
[ 764]    0715:                                       WHILE2:
[ 765]        :                                       
[ 766]    0715: B4 01                                 MOV AH,1
[ 767]    0717: CD 21                                 INT 21H
[ 768]        :                                       
[ 769]    0719: 3C 0D                                 CMP AL,0DH
[ 770]    071B: 74 28                                 JE BREAK3
[ 771]        :                                       
[ 772]        :                                       ;;ERROR TEST
[ 773]    071D: 3C 30                                 CMP AL,'0'
[ 774]    071F: 7C 25                                 JL ERRORIN
[ 775]        :                                       
[ 776]    0721: 3C 39                                 CMP AL,'9'
[ 777]    0723: 7F 02                                 JG STEP1
[ 778]        :                                       
[ 779]    0725: EB 08                                 JMP NEXT
[ 780]        :                                       
[ 781]    0727:                                       STEP1:
[ 782]    0727: 3C 41                                 CMP AL,'A'
[ 783]    0729: 7C 1B                                 JL ERRORIN
[ 784]        :                                       
[ 785]    072B: 3C 46                                 CMP AL,'F'
[ 786]    072D: 7F 17                                 JG ERRORIN
[ 787]        :                                       
[ 788]    072F:                                       NEXT:
[ 789]        :                                       ;;;;;;;;;;;;;;
[ 790]    072F: D1 E3 D1 E3 D1 E3 D1 E3               SHL BX,4
[ 791]        :                                       
[ 792]    0737: 3C 39                                 CMP AL,39H
[ 793]    0739: 7F 04                                 JG LETTER1
[ 794]        :                                       
[ 795]    073B: 2C 30                                 SUB AL,30H
[ 796]    073D: EB 02                                 JMP SHIFT
[ 797]        :                                       
[ 798]    073F:                                       LETTER1:
[ 799]    073F: 2C 37                                 SUB AL,37H
[ 800]        :                                       
[ 801]    0741:                                       SHIFT:
[ 802]    0741: 0A D8                                 OR BL,AL
[ 803]        :                                       
[ 804]    0743: E2 D0                                 LOOP WHILE2
[ 805]        :                                       
[ 806]    0745:                                       BREAK3:
[ 807]        :                                       
[ 808]    0745: C3                                    RET
[ 809]        :                                       INPUT_HEXAFUN ENDP
[ 810]        :                                       
[ 811]        :                                       
[ 812]        :                                       
[ 813]        :                                       
[ 814]        :                                       ;;ERROR input
[ 815]        :                                       
[ 816]    0746:                                       ERRORIN:
[ 817]        :                                       
[ 818]    0746: B4 09                                 MOV AH,9
[ 819]    0748: BA 16 00                              LEA DX,NEWL
[ 820]    074B: CD 21                                 INT 21H
[ 821]    074D: BA 16 00                              LEA DX,NEWL
[ 822]    0750: CD 21                                 INT 21H
[ 823]        :                                       
[ 824]    0752: BA D6 01                              LEA DX,ERRORINP
[ 825]    0755: CD 21                                 INT 21H
[ 826]        :                                       
[ 827]    0757: EB 13                                 JMP AGAIN
[ 828]        :                                       
[ 829]        :                                       
[ 830]        :                                       
[ 831]        :                                       ;;ERROR message
[ 832]        :                                       
[ 833]    0759:                                       ERROR:
[ 834]        :                                       
[ 835]    0759: B4 09                                 MOV AH,9
[ 836]    075B: BA 16 00                              LEA DX,NEWL
[ 837]    075E: CD 21                                 INT 21H
[ 838]    0760: BA 16 00                              LEA DX,NEWL
[ 839]    0763: CD 21                                 INT 21H
[ 840]        :                                       
[ 841]    0765: BA A8 01                              LEA DX,ERRORMSG
[ 842]    0768: CD 21                                 INT 21H
[ 843]        :                                       
[ 844]    076A: EB 00                                 JMP AGAIN
[ 845]        :                                       
[ 846]        :                                       
[ 847]        :                                       
[ 848]        :                                       
[ 849]        :                                       ;;REPEAT PROGRAMM
[ 850]        :                                       
[ 851]    076C:                                       AGAIN:
[ 852]        :                                       
[ 853]    076C: B4 09                                 MOV AH,9
[ 854]    076E: BA 16 00                              LEA DX,NEWL
[ 855]    0771: CD 21                                 INT 21H
[ 856]    0773: BA 16 00                              LEA DX,NEWL
[ 857]    0776: CD 21                                 INT 21H
[ 858]    0778: BA 16 00                              LEA DX,NEWL
[ 859]    077B: CD 21                                 INT 21H
[ 860]    077D: BA 16 00                              LEA DX,NEWL
[ 861]    0780: CD 21                                 INT 21H
[ 862]        :                                       
[ 863]        :                                       
[ 864]    0782: E9 9B FB                              JMP START
[ 865]        :                                       
[ 866]        :                                       
[ 867]        :                                       
[ 868]        :                                       
[ 869]        :                                       ;;end programm
[ 870]        :                                       
[ 871]    0785:                                       EXIT:
[ 872]        :                                       
[ 873]    0785: B4 09                                 MOV AH,9
[ 874]    0787: BA 16 00                              LEA DX,NEWL
[ 875]    078A: CD 21                                 INT 21H
[ 876]    078C: BA 16 00                              LEA DX,NEWL
[ 877]    078F: CD 21                                 INT 21H
[ 878]    0791: BA 16 00                              LEA DX,NEWL
[ 879]    0794: CD 21                                 INT 21H
[ 880]        :                                       
[ 881]    0796: BA 0D 02                              LEA DX,ENDMSG
[ 882]    0799: CD 21                                 INT 21H
[ 883]        :                                       
[ 884]    079B: B4 4C                                 MOV AH,4CH      ; ignore emulator haulted
[ 885]    079D: CD 21                                 INT 21H
[ 886]        :                                       
[ 887]        :                                       
[ 888]        :                                       
[ 889]        :                                       
[ 890]        :                                       
[ 891]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 9F      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 05      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 23      -   check sum (l.byte)
0013: 82      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 32      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 32      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
